#!/bin/sh
#
# ARDOC - NIghtly COntrol System
# Author Alex Undrus <undrus@bnl.gov>
# 
# ----------------------------------------------------------
# ardoc_webpage
# ----------------------------------------------------------
#
function rsync_loop () {
    arg=$1
    quant=60
    LIMIT=10
    a=1
    r_code_prev=0
    while [ "$a" -le $LIMIT ]
    do
        echo "ardoc_webpage: info: running iteration ${a} for rsync ${arg}" $(date) 
        ((a++))
        eval rsync ${arg}; r_code=$?
	if [ "${r_code}" -eq 0 ]; then
            echo "ardoc_webpage: info: successful iteration $((a-1)) for rsync ${arg}" $(date)
            if [ "${a}" -gt 2 ]; then
                mail -s "Nightly EOS log copy: $((a-1)) iterations on ${hname}" "undrus@bnl.gov" <<< "$copy_origin to $copy_target: ${a} iterations, previous error code ${r_code_prev}, on $(date)"
            fi
            break
	else
            r_code_prev="${r_code}"    
        fi
        echo "ardoc_webpage: warning: rsync error code (${arg})" $(date)
        echo "ardoc_webpage: info: sleeping $((a-1))"
        sleep $quant
        if [ "$a" -gt "$LIMIT" ]; then
            echo "ardoc_webpage: persistent error ${r_code} for rsync ${arg}" $(date) 
            break
        fi
    done
    return ${r_code}
}

phase=0
jid="NONE"
squash_storage="False"
while [ $# -ne 0 ]; do
    case $1 in
         --clean)      phase=1;;
         --copy)       phase=2;;
	 --squash)     squash_storage="True";;
         --jid)        jid=$2; shift;;
    esac
    shift
done

echo "------------------------------------------------------------"
echo "   Starting ARDOC web pages generation"
echo "------------------------------------------------------------"
####
source ${ARDOC_WORK_AREA}/ardoc_webpage_gen
####

array_proj=(${ARDOC_PROJECT_ARRAY})
el_proj=${#array_proj[@]}
last_el_proj=$((${el_proj} - 1))
sign_first=0
sign_last=0
if [ "${array_proj[0]}" = "" -o "${array_proj[0]}" = "$ARDOC_PROJECT_NAME" ]; then
sign_first=1
fi

if [ "${last_el_proj}" -lt 0 ]; then
sign_last=1
elif [ "${array_proj[${last_el_proj}]}" = "" -o "${array_proj[${last_el_proj}]}" = "$ARDOC_PROJECT_NAME" ]; then
sign_last=1
fi

if [ "$phase" -eq 1 ]; then
##
##CLEAN
if [ -f $ARDOC_WORK_AREA/ardoc_prepage ]; then rm -f $ARDOC_WORK_AREA/ardoc_prepage; fi
if [ -f $ARDOC_WORK_AREA/ardoc_testprepage ]; then rm -f $ARDOC_WORK_AREA/ardoc_testprepage; fi
if [ -f $ARDOC_WORK_AREA/ardoc_loghandler_report ]; then rm -f $ARDOC_WORK_AREA/ardoc_loghandler_report; fi
touch $ARDOC_WORK_AREA/ardoc_prepage
touch $ARDOC_WORK_AREA/ardoc_testprepage
touch $ARDOC_WORK_AREA/ardoc_loghandler_report
##
else # if [ "$phase" -eq 1 ]; then
# It was noticed on CentOS7 that /usr/sbin:/usr/local/sbin is omitted from Jenkins shell. SquashFS executables are in /usr/sbin. Below is the remedy
if [[ ":$PATH:" =~ :/usr/local/sbin ]]; then
    echo "INFO: /usr/local/sbin is already in ${PATH}"
else
    export PATH=${PATH}:/usr/local/sbin
    echo "INFO: /usr/local/sbin is appended to ${PATH}"
fi
if [[ ":$PATH:" =~ :/usr/sbin ]]; then
    echo "INFO: /usr/sbin is already in ${PATH}"
else
    export PATH=${PATH}:/usr/sbin
    echo "INFO: /usr/sbin is appended to ${PATH}"
fi
#     
  if [ "$phase" -eq 0 ]; then
    ${ARDOC_HOME}/ardoc_lock --lock --dir ${ARDOC_WEBDIR}
    ${ARDOC_HOME}/ardoc_errorhandler --jid $jid
    ${ARDOC_HOME}/ardoc_lock --unlock --dir ${ARDOC_WEBDIR}
  fi 

copy_origin="$ARDOC_WEBDIR"
echo "ardoc_webpage: Info: cleaning copy origin $copy_origin"
python3 ${ARDOC_HOME}/ardoc_cleaner.py $copy_origin 20
echo "ardoc_webpage: Info: cleaning copy origin $copy_origin completed"
  
if [ "$ARDOC_WEB_ACCESS_DIR_ALT" != "" ]; then
  hname=$(hostname | cut -d. -f1)
  copy_origin="$ARDOC_WEBDIR"
  copy_target="$ARDOC_WEB_ACCESS_DIR_ALT/${ARDOC_NIGHTLY_GROUP}WebArea/ardoc_web_area${ARDOC_SUFFIX}"
  [[ ! -d $copy_target ]] && mkdir -p $copy_target
  echo "ardoc_webpage: Info: cleaning alternative copy target $copy_target"
  python3 ${ARDOC_HOME}/ardoc_cleaner_lstat.py $copy_target 20
  echo "ardoc_webpage: Info: cleaning alternative copy target $copy_target completed"
  rsync_params="--delete -uvrlpt --include=\"/*${ARDOC_PROJECT_RELNAME}/***\" --exclude=\"*\" $copy_origin/ $copy_target"
#  echo "ardoc_webpage: Info: running alt rsync --delete -uvrlpt --include=\"/*${ARDOC_PROJECT_RELNAME}/***\" --exclude=\"*\" $copy_origin/ $copy_target" $(date)
  epoch_start=$(date +%s)
  rsync_loop "${rsync_params}"
  st_rsync=$?
  epoch_end=$(date +%s)
  epoch_diff=$((epoch_end - epoch_start))
  fname=$copy_target/copy_time_stamp.txt
  strng="COPY ON ${hname}, process $$"
  echo ${strng} > ${fname}; st_eos21=$?
  grep -q "${strng}" ${fname}; st_eos22=$?
  if [ "${st_rsync}" -eq 0 -a "${st_eos21}" -eq 0 -a "${st_eos22}" -eq 0 ]; then
    echo "INFO: EOS COPY QUALITY CHECK PASSED"
#    mail -s "Nightly EOS log copy success on ${hname}" "undrus@bnl.gov" <<< "$copy_origin to $copy_target runtime ${epoch_diff} s,success on $(date)"
  else
    echo "WARNING: EOS COPY QUALITY CHECK FAILED: rsync status ${st_rsync}, small file write/read: (${fname} ${st_eos21} ${st_eos22})"
    mail -s "Nightly EOS log copy failure on ${hname}" "undrus@bnl.gov" <<< "$copy_origin to $copy_target runtime ${epoch_diff} s, error codes ${st_rsync} ${st_eos21} ${st_eos22} on $(date)"
  fi
  cp ${ARDOC_HOME}/index_directory_list.php ${copy_target}/index.php
  echo "ardoc_webpage: Info: END running alt rsync --delete -uvrlpt --include=\"/*${ARDOC_PROJECT_RELNAME}/***\" --exclude=\"*\" $copy_origin/ $copy_target ${st_rsync} ${st_eos21} ${st_eos22} runtime ${epoch_diff} s" $(date)
  buildlogarea="${copy_target}/ARDOC_Log_${ARDOC_PROJECT_RELNAME}"
  testlogarea="${copy_target}/ARDOC_TestLog_${ARDOC_PROJECT_RELNAME}"
  if [ "${squash_storage}" = "True" ]; then 
  for logarea in "${buildlogarea}" "${testlogarea}"
  do
    echo "ardoc_webpage: Info: STARTING squashing logarea: ${logarea}"
    if [ -d ${logarea} ]; then
      [[ -d ${logarea}_tmp ]] &&  rm -rf ${logarea}_tmp	
      echo "ardoc_webpage: Info: running mv ${logarea} ${logarea}_tmp"
      mv ${logarea} ${logarea}_tmp; st_sq01=$?
      echo "ardoc_webpage: Info: ls ${logarea}"
      ls -ltr ${logarea}
      echo "ardoc_webpage: Info: ls ${logarea}_tmp"
      ls -ltr ${logarea}_tmp
      echo "ardoc_webpage: Info: running eos squash new ${logarea}"
      eos squash new ${logarea}; st_sq02=$?
      echo "ardoc_webpage: Info: running rsync -uvrlpt ${logarea}_tmp/ ${logarea}"
      rsync_params="-uvrlpt ${logarea}_tmp/ ${logarea}"
      rsync_loop "${rsync_params}"; st_sq03=$?
      echo "ardoc_webpage: Info: running eos squash pack ${logarea}"
      eos squash pack ${logarea}; st_sq04=$?
      st_sqsum=0
      [[ "${st_sq01}" != 0 || "${st_sq02}" != 0 || "${st_sq03}" != 0 || "${st_sq04}" != 0 ]] && st_sqsum=1
      if [ "${st_sqsum}" -eq 0 ]; then
         echo "INFO: SquashFS archive was successfully created on $(date)"
#         mail -s "SquashFS archive was successfully created on ${hname}" "undrus@bnl.gov" <<< "$copy_origin to $logarea SquashFS archive success on $(date)"
         echo "INFO: removing ${logarea}_tmp"
         rm -rf ${logarea}_tmp
      else
         echo "WARNING: SquashFS archive creation failed on $(date), error codes ${st_sq01}, ${st_sq02}, ${st_sq03}, ${st_sq04}"
         mail -s "SquashFS archive creation failed on ${hname}" "undrus@bnl.gov" <<< "$copy_origin to $logarea, SquashFS error codes ${st_sq01}, ${st_sq02}, ${st_sq03}, ${st_sq04} on $(date\
)"
      fi
    fi
    echo "ardoc_webpage: Info: END squashing logarea: ${logarea}"
  done
  fi #if [ "${squash_storage}" = "True" ]; then
fi      

if [ "$ARDOC_WEB_ACCESS_DIR" != "" ]; then
copy_target="$ARDOC_WEB_ACCESS_DIR/${ARDOC_NIGHTLY_GROUP}WebArea/ardoc_web_area${ARDOC_SUFFIX}" 
echo "ardoc_webpage: Info: cleaning copy target $copy_target"
python3 ${ARDOC_HOME}/ardoc_cleaner.py $copy_target 20
echo "ardoc_webpage: Info: cleaning copy target $copy_target completed"
[[ ! -d $copy_target ]] && mkdir -p $copy_target
echo "ardoc_webpage: Info: running rsync -uvrlpt $copy_origin/ $copy_target"
rsync -uvrlpt $copy_origin/ $copy_target
echo "ardoc_webpage: Info: END running rsync -uvrlpt $copy_origin/ $copy_target"
fi

##
fi #[ "$phase"



