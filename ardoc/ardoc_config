#!/bin/sh
# ARDOC - ATLAS Release DOCumentation tool
# Author Alex Undrus <undrus@bnl.gov>
# 
# ----------------------------------------------------------
# adroc_config: script that sets adroc environment
#               supposed to be sourced from Bourne shell 
# ----------------------------------------------------------

echo "------------------------------------------------------------"
echo "   Starting ARDOC configuration"
echo "------------------------------------------------------------"

export ARDOC_HOSTNAME=`hostname`
export ARDOC_PROJECT_RELNAME_GEN=${ARDOC_PROJECT_RELNAME}
export ARDOC_VERSION=`cat $ARDOC_HOME/ardoc.version | head -1`

if [ "$ARDOC_CONFIG_AREA" = "" -a "$ARDOC_GEN_CONFIG_AREA" = "" ]; then
echo " ardoc_config: FATAL: ardoc_config: none of ARDOC_*CONFIG_AREA are defined"
echo " ardoc_config: Define this area with ardoc cache file before running ardoc" 
return 1
fi

dir_ardochome=`dirname ${ARDOC_HOME}`
export ARDOC_DOCHOME=$dir_ardochome/ardoc_work_toparea/${ARDOC_PROJECT_RELNAME}
export ARDOC_WORK_AREA=${ARDOC_DOCHOME}/ardoc_work_area$$

if [ "$ARDOC_BUILD_FROM_SCRATCH" = "yes" ]; then
[[ -d "$ARDOC_WORK_AREA" ]] && rm -rf ${ARDOC_WORK_AREA}
fi
if [ ! -d "$ARDOC_WORK_AREA" ]; then
mkdir -p ${ARDOC_WORK_AREA}; stat=$?
[[ "$stat" -ne 0 ]] && echo "ardoc_config: cannot create work area ${ARDOC_WORK_AREA}" && return ${stat}
fi

echo "ardoc_config: cleaning work top area $dir_ardochome/ardoc_work_toparea (retention 20 days)"
${ARDOC_HOME}/ardoc_cleaner.pl $dir_ardochome/ardoc_work_toparea 20

cache=""
gen_cache=""
[[ -f ${ARDOC_CONFIG_AREA}/ardoc_cache ]] && cache=${ARDOC_CONFIG_AREA}/ardoc_cache
[[ -f ${ARDOC_GEN_CONFIG_AREA}/ardoc_cache ]] && gen_cache=${ARDOC_GEN_CONFIG_AREA}/ardoc_cache
[[ "$gen_cache" = "" && "$cache" = "" ]] && echo "ardoc_config: FATAL: ardoc_cache is not found" && return 1

# (0) setting project location variables
sf=""
rm -f ${ARDOC_WORK_AREA}/cache_scan_result
rm -f ${ARDOC_WORK_AREA}/cache_scan_result_saved
rm -f ${ARDOC_WORK_AREA}/cache_scan_result_gen
[[ "${gen_cache}" != "" ]] &&  caches=" -f ${gen_cache}"
[[ "${cache}" !=	"" ]] && caches="${caches} -f ${cache}"
# processing options in the tag
${ARDOC_HOME}/ardoc_cachescan.pl -d "PROJECT SETTINGS" ${caches}
source ${ARDOC_WORK_AREA}/cache_scan_result
#
cat ${ARDOC_WORK_AREA}/cache_scan_result > ${ARDOC_WORK_AREA}/cache_scan_result_saved
rm -f ${ARDOC_WORK_AREA}/cache_scan_result
# processing options under the tag
touch ${ARDOC_WORK_AREA}/cache_scan_result_gen
if [ "${gen_cache}" != "" ]; then
${ARDOC_HOME}/ardoc_cachescan.pl -c "PROJECT SETTINGS" -f ${gen_cache}
cat ${ARDOC_WORK_AREA}/cache_scan_result >> ${ARDOC_WORK_AREA}/cache_scan_result_gen
fi
rm -f ${ARDOC_WORK_AREA}/cache_scan_result
#
${ARDOC_HOME}/ardoc_cachescan.pl -c "PROJECT SETTINGS" ${caches}
#
cat ${ARDOC_WORK_AREA}/cache_scan_result >> ${ARDOC_WORK_AREA}/cache_scan_result_saved

#CALCULATING ARDOC_SUFFIX
ARDOC_SUFFIX=`/bin/sh -c :;(unset ARDOC_SUFFIX; source ${ARDOC_WORK_AREA}/cache_scan_result > /dev/null 2>&1; ${ARDOC_HOME}/ardoc_project_suffix_creator.pl)`
echo "ardoc_config: ardoc_suffix calculated: $ARDOC_SUFFIX" 
[[ "$ARDOC_SUFFIX" = "" ]] && "ardoc_config: Error: ARDOC_SUFFIX is empty" &&  return 1
export ARDOC_SUFFIX

#SCAN OF ENVIRONMENT DEFINED IN PROJECT SETTINGS SECTION 
source ${ARDOC_WORK_AREA}/cache_scan_result

#MOVE WORK AREA TO PERMANENT LOCATION
ardoc_work_area_tmp=${ARDOC_WORK_AREA}
export ARDOC_WORK_AREA=${ARDOC_DOCHOME}/ardoc_work_area${ARDOC_SUFFIX}
if [ "$ARDOC_BUILD_FROM_SCRATCH" = "yes" ]; then
[[ -d "$ARDOC_WORK_AREA" ]] && rm -rf ${ARDOC_WORK_AREA}
fi
[[ ! -d $ARDOC_WORK_AREA ]] && mkdir -p ${ARDOC_WORK_AREA}
cp -Rp ${ardoc_work_area_tmp}/* ${ARDOC_WORK_AREA}/.
rm -rf ${ardoc_work_area_tmp} 

ARDOC_PROJECT_ARRAY_S=""
[[ "${ARDOC_PROJECT_ARRAY}" != "" ]] && export ADROC_PROJECT_ARRAY_S="${ARDOC_PROJECT_ARRAY}"
[[ ! -d ${ARDOC_RELHOME} ]] && mkdir -p ${ARDOC_RELHOME}
[[ ! -d ${ARDOC_DOCHOME}/ARDOC_area ]] && mkdir ${ARDOC_DOCHOME}/ARDOC_area
[[ ! -d ${ARDOC_DOCHOME}/ARDOC_area/ARDOC_Log${ARDOC_SUFFIX} ]] && mkdir ${ARDOC_DOCHOME}/ARDOC_area/ARDOC_Log${ARDOC_SUFFIX}
export ARDOC_LOG=${ARDOC_DOCHOME}/ARDOC_area/ARDOC_Log${ARDOC_SUFFIX}/ardoc_general.loglog
export ARDOC_TESTLOG=${ARDOC_DOCHOME}/ARDOC_area/ARDOC_TestLog${ARDOC_SUFFIX}/ardoc_test.loglog
export ARDOC_BUILDLOG=${ARDOC_DOCHOME}/ARDOC_area/ARDOC_Log${ARDOC_SUFFIX}/ardoc_build.loglog

[[ "${ARDOC_DBFILE}" = "" ]] && export ARDOC_DBFILE="${ARDOC_WORK_AREA}/package.db"
[[ "${ARDOC_TEST_DBFILE}" = "" ]] && export ARDOC_TEST_DBFILE="${ARDOC_WORK_AREA}/test.db"

if [ "$ARDOC_BUILD_FROM_SCRATCH" = "yes" -o "$ARDOC_LOG_SCRATCH" = "yes" ]; then
rm -rf ${ARDOC_DOCHOME}/ARDOC_area/ARDOC_Log${ARDOC_SUFFIX}
mkdir ${ARDOC_DOCHOME}/ARDOC_area/ARDOC_Log${ARDOC_SUFFIX}
rm -rf ${ARDOC_DOCHOME}/ARDOC_area/ARDOC_TestLog${ARDOC_SUFFIX}
mkdir ${ARDOC_DOCHOME}/ARDOC_area/ARDOC_TestLog${ARDOC_SUFFIX}
rm -f ${ARDOC_DBFILE}
rm -f ${ARDOC_TEST_DBFILE}
if [ -f ${ARDOC_LOG} ]; then rm -f ${ARDOC_LOG}; fi; touch ${ARDOC_LOG}
if [ -f ${ARDOC_BUILDLOG} ]; then rm -f ${ARDOC_BUILDLOG}; fi; touch ${ARDOC_BUILDLOG}
if [ -f ${ARDOC_TESTLOG} ]; then rm -f ${ARDOC_TESTLOG}; fi; touch ${ARDOC_TESTLOG}
fi

#WEBDIR default
if [ "${ARDOC_WEBDIR}" = "" ]; then
ARDOC_WEBDIR=${dir_ardochome}/${ARDOC_NIGHTLY_GROUP}WebArea/ardoc_web_area${ARDOC_SUFFIX}
export ARDOC_WEBDIR
fi
[[ ! -d ${ARDOC_WEBDIR} ]] && mkdir -p ${ARDOC_WEBDIR}

bwebdir2=`basename $ARDOC_WEBDIR`
dwebdir=`dirname $ARDOC_WEBDIR`
bwebdir1=`basename $dwebdir`
ARDOC_WEBPAGE="$ARDOC_HTTP/$bwebdir1/$bwebdir2"
export ARDOC_WEBPAGE

if [ "${ARDOC_COMMON_WEBDIR}" != "" ]; then
[[ ! -d ${ARDOC_COMMON_WEBDIR} ]] && mkdir -p ${ARDOC_COMMON_WEBDIR}
bwebdir2=`basename $ARDOC_COMMON_WEBDIR`
ARDOC_COMMON_WEBPAGE="$ARDOC_HTTP/$bwebdir2"
export ARDOC_COMMON_WEBPAGE
fi

#### ARDOC_WEB_HOME ?????
export ARDOC_WEB_HOME="$ARDOC_HTTP_BUILD"

echo "------------------------------------------------------------" >> ${ARDOC_LOG}
echo "   Starting ARDOC configuration" >> ${ARDOC_LOG}
echo "------------------------------------------------------------" >> ${ARDOC_LOG}

# (1) error analysis
rm -f ${ARDOC_WORK_AREA}/ardoc_errorhandler_gen
${ARDOC_HOME}/ardoc_cachescan.pl -c "ERROR ANALYSIS" ${caches}
cat ${ARDOC_WORK_AREA}/cache_scan_result >> \
${ARDOC_WORK_AREA}/ardoc_errorhandler_gen

# (2) parameters for web page
rm -f ${ARDOC_WORK_AREA}/ardoc_webpage_gen
${ARDOC_HOME}/ardoc_cachescan.pl -c "WEB PAGE" ${caches}
cat ${ARDOC_WORK_AREA}/cache_scan_result >> \
${ARDOC_WORK_AREA}/ardoc_webpage_gen

echo "------------------------------------------------------------" >> ${ARDOC_LOG}
echo "   The following variables are determined at ARDOC configuration" >> ${ARDOC_LOG}
env | grep ARDOC >>  ${ARDOC_LOG}
echo $HOST >>  ${ARDOC_LOG}
echo "--JENKINS env, if any---------------------------------------" >> ${ARDOC_LOG}
env | grep JENKINS | grep -v ARDOC >>  ${ARDOC_LOG}
env | grep BUILD_ | grep -v ARDOC >>  ${ARDOC_LOG}
echo "------------------------------------------------------------" >> ${ARDOC_LOG}

# (end) -----------------------------

