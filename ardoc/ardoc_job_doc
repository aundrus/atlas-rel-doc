#!/bin/sh
#
# ARDOC - NIghtly COntrol System
# Author Alex Undrus <undrus@bnl.gov>
# 
# ----------------------------------------------------------
# ardoc_job_doc
# ----------------------------------------------------------
#
jid="NONE"
#while [ $# -ne 0 ]; do
#    case $1 in
#         -b | --begin)     start_point=$2; shift;;
#              --end)       end_step=$2; shift;;
#         -s | --scratch)   from_scratch="yes";;
#              --nocopy)    copy_steps="no";;  
#         -r | --relnum)    relnum_fixed=$2; shift;;
#         -* | --*)         show_help; exit 1;;
#    esac
#    shift
#done

comname=`basename $0`
if [ "$comname" = "ardoc_job_doc" ]; then
exitcomjob="exit"
else
exitcomjob="return"
fi

if [ "${ARDOC_HOME}" = "" ]; then
echo "ardoc_job: ARDOC_HOME variable is not defined, "
echo "           please set before running ardoc jobs"
eval ${exitcomjob} 1
fi
if [ "${ARDOC_PROJECT_RELNAME}" = "" ]; then
echo "ardoc_job: ARDOC_PROJECT_RELNAME variable is not defined, "
echo "           please set before running ardoc jobs"
eval ${exitcomjob} 1
fi
export ARDOC_PROJECT_RELNAME_COPY=$ARDOC_PROJECT_RELNAME

project_string=""
[[ ${ARDOC_PROJECT_NAME} != "" ]] && project_string=", PROJECT ${ARDOC_PROJECT_NAME}"
[[ ${ARDOC_PROJECT_NUMBER} != "" ]] && project_string="${project_string}, SEQ. NUMBER ${ARDOC_PROJECT_NUMBER}"
echo "ardoc_job: STARTING BUILDING DOCUMENTATION FOR RELEASE ${ARDOC_PROJECT_RELNAME}${project_string}"

rm -f /tmp/ardoc_log* > /dev/null 2>&1
tmp_log="/tmp/ardoc_log_$$"
tmp_env="/tmp/ardoc_env_$$"
env > $tmp_env
#######STEP 0   CONFIG##########
date_start_config=`date +"%Y-%m-%d %H:%M:%S"`
ARDOC_BYPASS="no"
[[ "${ARDOC_BYPASS_ENABLE}" = "yes" ]] && ARDOC_BYPASS="yes" 
export ARDOC_BYPASS
source ${ARDOC_HOME}/ardoc_config > ${tmp_log} 2>&1; stat=$?
if [ "$stat" -ne 0 ]; then 
echo "ARDOC_LOG=" ${ARDOC_LOG}
echo "ardoc_job:  ARDOC failed at configuration" >> ${ARDOC_LOG}; eval ${exitcomjob} ${stat}  
fi
  dsta=`date +"%Y-%m-%d %H:%M"`
  echo $dsta > ${ARDOC_WORK_AREA}/start_date
  [[ -f ${ARDOC_WORK_AREA}/end_date ]] && rm -f ${ARDOC_WORK_AREA}/end_date
  touch ${ARDOC_WORK_AREA}/end_date

#######    
echo "DDDDDDDDDDDDDDD"
cat ${tmp_log}           
echo "DDDDDDDDDDDDDDA"
env | grep ARDOC
echo "DDDDDDDDDDDDDDB"
cat ${tmp_log} >> ${ARDOC_LOG}
###### 
dirlog=`dirname $ARDOC_LOG`
dirtlog=`dirname $ARDOC_TESTLOG`
######
#COPY cmake configuration file to ARDOC_CONFBUILDLOG
echo "COPYING $MR_PATH_TO_CONFBUILDLOG $ARDOC_CONFBUILDLOG "
[[ -f $MR_PATH_TO_CONFBUILDLOG ]] && cp -a $MR_PATH_TO_CONFBUILDLOG $ARDOC_CONFBUILDLOG
check_conf=""
if [ "${ARDOC_CONFBUILDLOG}" != "" -a -f ${ARDOC_CONFBUILDLOG} ]; then
check_conf=`python3 ${ARDOC_HOME}/ardoc_univ_errortester.py --conf ${ARDOC_CONFBUILDLOG}`
fi
if [ "$check_conf" != "" ]; then
echo "ardoc_job_doc: configuration build log contains problematic string:" >> ${ARDOC_CONFBUILDLOG}
echo "========>>  $check_conf" >> ${ARDOC_CONFBUILDLOG}
else
echo "ardoc_job_doc: configuration build log looks OK" >> ${ARDOC_CONFBUILDLOG}
fi

#COPY checkout logfile to ARDOC_CHECKOUTLOG
echo "COPYING $MR_PATH_TO_CHECKOUTLOG $ARDOC_CHECKOUTLOG "
[[ -f $MR_PATH_TO_CHECKOUTLOG ]] && cp -a $MR_PATH_TO_CHECKOUTLOG $ARDOC_CHECKOUTLOG
check_checkout=""
if [ "${ARDOC_CHECKOUTLOG}" != "" -a -f ${ARDOC_CHECKOUTLOG} ]; then
check_checkout=`python3 ${ARDOC_HOME}/ardoc_univ_errortester.py --checkout ${ARDOC_CHECKOUTLOG}`
fi
if [ "$check_checkout" != "" ]; then
echo "ardoc_job_doc: checkout log contains problematic string:" >> ${ARDOC_CHECKOUTLOG}
echo "========>>  $check_checkout" >> ${ARDOC_CHECKOUTLOG}
echo $check_checkout | grep -i "timeout" >& /dev/null; stat_tm=$?
if [ "$stat_tm" -eq 0 ]; then
hnm=`hostname`
body=${dirlog}/timeout_message_body
MAILTO="undrus@bnl.gov"
printf " ===========================================================\n" > $body
printf " GIT TIMEOUT IN ${ARDOC_CHECKOUTLOG} on ${hnm} \n" >> $body
printf " ===========================================================\n">> $body
mail -s "CI GIT TIMEOUT PB: machine ${hnm}" "$MAILTO"  < ${body}
fi
else
echo "ardoc_job_doc: configuration build log looks OK" >> ${ARDOC_CHECKOUTLOG}
fi

#COPY AtlasExternals build log file to ARDOC_INSTBUILDLOG                                                             
echo "COPYING $MR_PATH_TO_EXTBUILDLOG $ARDOC_INSTBUILDLOG "
[[ -f $MR_PATH_TO_EXTBUILDLOG ]] && cp -a $MR_PATH_TO_EXTBUILDLOG $ARDOC_INSTBUILDLOG
check_inst=""
if [ "${ARDOC_INSTBUILDLOG}" != "" -a -f ${ARDOC_INSTBUILDLOG} ]; then
check_inst=`python3 ${ARDOC_HOME}/ardoc_univ_errortester.py --inst ${ARDOC_INSTBUILDLOG}`
fi
if [ "$check_inst" != "" ]; then
echo "ardoc_job_doc: instbuild log contains problematic string:" >> ${ARDOC_INSTBUILDLOG}
echo "========>>  $check_inst" >> ${ARDOC_INSTBUILDLOG}
else
echo "ardoc_job_doc: configuration build log looks OK" >> ${ARDOC_INSTBUILDLOG}
fi

[[ -f $dirtlog/ardoc_test_final.logora ]] && rm -f $dirtlog/ardoc_test_final.logora
[[ -f $dirlog/ardoc_general.logora ]] && rm -f $dirlog/ardoc_general.logora
[[ -f $dirlog/ardoc_build.logora ]] && rm -f $dirlog/ardoc_build.logora
[[ -f $dirtlog/ardoc_test.logora ]] && rm -f $dirtlog/ardoc_test.logora
touch $dirtlog/ardoc_test_final.logora
touch $dirlog/ardoc_general.logora
touch $dirlog/ardoc_build.logora
touch $dirtlog/ardoc_test.logora

if [ "${ARDOC_PROJECT_NUMBER}" = "" -o "${ARDOC_PROJECT_NUMBER}" -eq 0 -o "${ARDOC_PROJECT_NUMBER}" -eq 1 ]; then 
  echo "ardoc_job_doc: START ardoc_oracle_starter.sh -n ${ARDOC_NIGHTLY_NAME} -c ${ARDOC_ARCH}" >> $dirlog/ardoc_general.logora
  ${ARDOC_HOME}/ardoc_oracle_starter.sh -n ${ARDOC_NIGHTLY_NAME} -c ${ARDOC_ARCH} >> $dirlog/ardoc_general.logora 2>&1
  echo "ardoc_job_doc: END ardoc_oracle_starter.sh -n ${ARDOC_NIGHTLY_NAME} -c ${ARDOC_ARCH}" >> $dirlog/ardoc_general.logora
fi

python $ARDOC_HOME/ardoc_container_extractor_monol.py >> ${ARDOC_LOG} 2>&1

${ARDOC_HOME}/ardoc_progress_informer 0 "$date_start_config"

$ARDOC_HOME/ardoc_db_access -b -s "TOOLINIT" >> $dirlog/ardoc_general.logora 2>&1
${ARDOC_HOME}/ardoc_progress_informer 1
$ARDOC_HOME/ardoc_db_access -b -s "CHECKOUT" >> $dirlog/ardoc_general.logora 2>&1
${ARDOC_HOME}/ardoc_progress_informer 2
$ARDOC_HOME/ardoc_db_access -b -s "PROJECTCONF" >> $dirlog/ardoc_general.logora 2>&1
${ARDOC_HOME}/ardoc_progress_informer 3
echo "ardoc_job_doc: PYTHONPATH = $PYTHONPATH"
echo "ardoc_job_doc: PYTHONPATH = $PYTHONPATH" >> $dirlog/ardoc_build.logora
$ARDOC_HOME/ardoc_db_access_test -b -s "BUILD" >> $dirlog/ardoc_build.logora 2>&1

$ARDOC_HOME/ardoc_oracle_wrapper.sh 3 python $ARDOC_HOME/ardoc_oracle_build_results.py >> $dirlog/ardoc_build.logora 2>&1 

dbuildlog=`dirname $ARDOC_BUILDLOG`
python3 $ARDOC_HOME/ardoc_cmake_loghandler_new.py >> ${ARDOC_LOG} 2>&1
python3 $ARDOC_HOME/ardoc_cmake_loghandler_new_2ndloop.py -l $dbuildlog/ardoc_build.loglog >> ${ARDOC_LOG} 2>&1
python $ARDOC_HOME/ardoc_testdb_generator.py >> ${ARDOC_TESTLOG} 2>&1

${ARDOC_HOME}/ardoc_univ_progress_informer --phase 1 --step checkout --check "$check_checkout" >> ${ARDOC_CHECKOUTLOG} 2>&1
${ARDOC_HOME}/ardoc_univ_progress_informer --phase 1 --step conf --check "$check_conf" >> ${ARDOC_CONFBUILDLOG} 2>&1
${ARDOC_HOME}/ardoc_univ_progress_informer --phase 1 --step inst --check "$check_inst" >> ${ARDOC_INSTBUILDLOG} 2>&1

${ARDOC_HOME}/ardoc_progress_informer 4
#$ARDOC_HOME/ardoc_db_access -e -s "CO"
#$ARDOC_HOME/ardoc_db_access -e -s "CB" 
#$ARDOC_HOME/ardoc_db_access -e -s "IB"

$ARDOC_HOME/ardoc_db_access -b -s "ERR" >> $dirlog/ardoc_general.logora 2>&1
$ARDOC_HOME/ardoc_oracle_wrapper.sh 3 python $ARDOC_HOME/ardoc_oracle_results.py >> $dirtlog/ardoc_test.logora 2>&1

${ARDOC_HOME}/ardoc_webpage --nomail >> ${ARDOC_LOG} 2>&1; stat=$?

$ARDOC_HOME/ardoc_oracle_wrapper.sh 3 python $ARDOC_HOME/ardoc_oracle_results.py -c >> $dirtlog/ardoc_test.logora 2>&1

${ARDOC_HOME}/ardoc_progress_informer 44
${ARDOC_HOME}/ardoc_progress_informer 10

#dir_dict=`dirname $CI_RESULTS_DICT`
#if [ "${dir_dict}" != "" ]; then
#if [ "${PYTHONPATH}" = "" ]; then
#   export PYTHONPATH=${dir_dict}
#else
#   export PYTHONPATH=${PYTHONPATH}:${dir_dict}
#fi
#fi
${ARDOC_HOME}/ardoc_oracle_wrapper_pythonpath.sh 2 python $ARDOC_HOME/ardoc_oracle_update_jobs_table.py >> $dirlog/ardoc_general.logora 2>&1
python ${ARDOC_HOME}/ardoc_process_oracle_results.py >> $dirlog/ardoc_general.logora 2>&1
${ARDOC_HOME}/ardoc_oracle_wrapper.sh 2 python ${ARDOC_HOME}/ardoc_oracle_hbeat.py --end >> $dirlog/ardoc_general.logora 2>&1

if [ "$stat" -ne 0 ]; then 
echo "ardoc_job:  ARDOC failed while analysing error or generating web pages"; 
##eval ${exitcomjob} 1
fi
date +"%Y-%m-%d %H:%M" > ${ARDOC_WORK_AREA}/end_date

if [ "$stat" -ne 0 ]; then
echo "ardoc_job:  ARDOC failed while analysing error or generating web pages";
fi












