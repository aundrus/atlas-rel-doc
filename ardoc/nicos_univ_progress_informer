#!/usr/bin/env perl
#
# NICOS - NIghtly COntrol System
# Author Alex Undrus <undrus@bnl.gov>
# 
# ----------------------------------------------------------
# nicos_univ_progress_informer
# ----------------------------------------------------------
#
use Env;
use File::Basename;
use Mail::Mailer;

my $NICOS_HOME="$NICOS_HOME";
my $NICOS_WEBDIR="$NICOS_WEBDIR";
my $NICOS_COMMON_WEBDIR="$NICOS_COMMON_WEBDIR";
my $NICOS_WEBDIR_MAIN="$NICOS_WEBDIR_MAIN";
my $NICOS_PROJECT_HOME="$NICOS_PROJECT_HOME";
my $NICOS_PROJECT_NAME="$NICOS_PROJECT_NAME";
my $NICOS_PROJECT_RELNAME="$NICOS_PROJECT_RELNAME";
my $NICOS_PROJECT_RELNAME_COPY="$NICOS_PROJECT_RELNAME_COPY";
my $NICOS_CONFBUILDLOG="$NICOS_CONFBUILDLOG";
my $NICOS_INSTBUILDLOG="$NICOS_INSTBUILDLOG";
my $CI_RESULTS_DICT="$CI_RESULTS_DICT";
my $gitlabMergeRequestId="$gitlabMergeRequestId";

$phase=1;
$step="";
$error="";
$ciresults_dir="";
if ( ${CI_RESULTS_DICT} ne "" ) {
    $ciresults_dir=dirname(${CI_RESULTS_DICT});
    if ( ! -d ${ciresults_dir} ){ system("mkdir","-p","${ciresults_dir}");}
}
if ( ${gitlabMergeRequestId} eq "" ) { $gitlabMergeRequestId="99999";}

while ($#ARGV>=0) {
    $_ = $ARGV[0];
    if ( $_ =~ /^-/ ){
	/^--step$/ && do { shift; $step="$ARGV[0]";shift; };
        /^--check$/ && do { shift; $error="$ARGV[0]";shift; };
        /^--phase$/ && do { shift; $phase="$ARGV[0]";shift; };
    } 
}

if ( $step eq "co" ) { $step="checkout"; }
if ( $step ne "conf" && $step ne "inst" && $step ne "checkout" ){
    print "nicos_univ_progress_informer: Error: step is $step, must be \"conf\" or \"inst\"\n";
    exit 1;
}

$base_log="undefined";
if ( $step eq "conf" ) { $base_log=basename($NICOS_CONFBUILDLOG); }
if ( $step eq "inst" ) { $base_log=basename($NICOS_INSTBUILDLOG); }
if ( $step eq "checkout" ) { $base_log=basename($NICOS_CHECKOUTLOG); }

$base_html=$base_log;
@filebase_a=split('\.',$base_html);
if ( $#filebase_a > 0 ) {
    pop @filebase_a;
    $base_html=join('\.',@filebase_a) . ".html";
}

my $WLogdir="NICOS_Log_${NICOS_PROJECT_RELNAME_COPY}";

if ( $step eq "conf" || $step eq "inst" ) {
    $option=lc($step).build;
    $OPTION=uc($step).BUILD;
} else {
    $option=lc($step);
    $OPTION=uc($step);
}

#
# remove logfiles at initialization
#
if ( $phase == 0 ) {
if ( ${NICOS_.${OPTION}.LOG} ne "" ){
    if ( -f ${NICOS_.${OPTION}.LOG} ) { unlink(${NICOS_.${OPTION}.LOG});}
}
}

my $error_statement="";
my $db_code=0;
$error_orig="$error";
$error_orig_1=(split(' ',$error_orig))[0];
if ( $error_orig_1 eq "G" ){
    $error_orig =~ s/G //;
    $db_code=1;
}
if ( $error_orig_1 eq "W" ){
    $error_orig =~ s/W //;
    $db_code=2;
}
if ( $error_orig_1 eq "M" ){
    $error_orig =~ s/M //;
    $db_code=4;
}
$error =~ s/ //g;
$image="<IMG SRC=\"tick.gif\" HEIGHT=15 WIDTH=15>";
if ($error ne "" && $error ne "0") { 
$error_statement="error"; 
$image="<IMG SRC=\"cross_red.gif\" HEIGHT=16 WIDTH=20>";
if ( $error_orig_1 eq "W" ){
    $error_statement="warning";
    $image="<IMG src=rad18x16.gif width=18 height=16>";
}
if ( $error_orig_1 eq "M" ){
    $error_statement="warning";
    $image="<IMG src=yl_ball.gif width=20 height=20>";
}
}
my $progress_file="${NICOS_WORK_AREA}/nicos_${option}_progress_status";
if ( $phase == 0 ){ unlink($progress_file); }

@prfl=();
if ( -f $progress_file ){
open(TTT,"$progress_file");
chomp(@prfl=<TTT>);
close(TTT);
}

@ctm = localtime(time());
$month=$ctm[4]+1;
$tstr="${month}/${ctm[3]} ${ctm[2]}:${ctm[1]}";
print "nicos_univ_progress_informer: filling ${progress_file}, phase ${phase}\n";
open(WRITEDATA,">$progress_file");
print WRITEDATA "$phase\n";
$_=$phase;
SWITCH: {
/0/ && do { 
       print WRITEDATA "<IMG SRC=pur_sq.gif HEIGHT=12 WIDTH=12>\n";
       print WRITEDATA "N/A\n";
       last SWITCH; };
/1/ && do {
    $basebase=${base_.${option}.html}; 
    print WRITEDATA "<a href=\"${NICOS_WEBPAGE}/NICOS_Log_${NICOS_PROJECT_RELNAME_COPY}/${basebase}\">${image}</a>\n";
    print WRITEDATA "$tstr\n";
    $copytarget="${NICOS_WEBDIR}/${WLogdir}";
    if ( ! -d ${copytarget} ){ system("mkdir","-p","${copytarget}");}
    system("cp -pf ${NICOS_.${OPTION}.LOG} ${copytarget}/.");
    $filebase1=basename(${NICOS_.${OPTION}.LOG});
    $filedir=dirname(${NICOS_.${OPTION}.LOG});
    $filebase=$filebase1;
    @filebase_a=split('\.',$filebase);
    if ( $#filebase_a > 0 ) {
	pop @filebase_a;
	$filebase=join('\.',@filebase_a);
	$filehtml="$filedir/$filebase" . ".html";
    }
    $copytarget="${NICOS_WEBDIR}/${WLogdir}";
    if ( ! -d ${copytarget} ){ system("mkdir","-p","${copytarget}");}
    system("cp -pf ${filehtml} ${copytarget}/.");
#    warn "HTML: ${filehtml}"; 
    if ( $step eq "conf" ) {
        system("genlogdir=`dirname $NICOS_LOG`;$NICOS_HOME/nicos_db_access -e -s \"CB\" -c ${db_code} >> \$genlogdir/nicos_confbuild.logora");
        if ( ${ciresults_dir} ne "" ){
            $filecmkproblems="${ciresults_dir}/cmkproblems${NICOS_PROJECT_NAME}_${gitlabMergeRequestId}";
            print "nicos_univ_progress_informer: writing cmake conf status ${db_code} to ${filecmkproblems}\n";
            open(CMKDATA,">$filecmkproblems");
            print CMKDATA "$db_code\n";
            close(CMKDATA); 
	}
    }
    if ( $step eq "inst" ) {
        system("genlogdir=`dirname $NICOS_LOG`;$NICOS_HOME/nicos_db_access -e -s \"IB\" -c ${db_code} >> \$genlogdir/nicos_instbuild.logora"); 
        if ( ${ciresults_dir} ne "" ){
	    $fileinstproblems="${ciresults_dir}/instproblems${NICOS_PROJECT_NAME}_${gitlabMergeRequestId}";
            print "nicos_univ_progress_informer: writing inst status ${db_code} to ${fileinstproblems}\n";
            open(INSTDATA,">$fileinstproblems");
            print INSTDATA "$db_code\n";
            close(INSTDATA);
	}
    }
    if ( $step eq "checkout" ) {system("genlogdir=`dirname $NICOS_LOG`;$NICOS_HOME/nicos_db_access -e -s \"CO\" -c ${db_code} >> \$genlogdir/nicos_checkout.logora")};
    last SWITCH; };   
print WRITEDATA "'UNAVAILABLE'\}";
}
close(WRITEDATA);


